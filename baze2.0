//ПИШЕМ БАЗУ ДАННЫХ! + СУБД! + :( СИМВОЛЬНЫЕ ЦЕЛОЧИСЛЕННЫЕ И ВЕЩЕСТВЕННЫЕ ПОД СИМВОЛОМ МОЖНО МАССИВ ЕСЛИ НЕ ИДЕТ 
/* при запуске должно появиться ЭТО ВСЕ меню свич для выбора пунктов без глобалки
3: 
1) ввод данных в пустую интерфейс на усмотрение но удобно. писать какой параметр по очереди
2) печать данных в виде таблички с шапкой не ездит ААААААААААААААА
3) добавление строки ПОСТРОЧНО 
4) поиск по конкретному столбцу тоесть вывести допустим всех строки с овчарками из строки породы
5) выход

4:
1) ввод данных в пустую интерфейс на усмотрение но удобно. писать какой параметр по очереди
2) печать данных в виде таблички с шапкой не ездит ААААААААААААААА
3) добавление строки ПОСТРОЧНО
4) поиск по ЛЮБОМУ столбцу (появляется подменю со всеми породами)
5) удаление строки ПОЛНОСТЬЮ 
6) сохранение данных в файл
7) чтение таблицы из файла
8) выход из проги

5:
1) ввод данных в пустую интерфейс на усмотрение но удобно. писать какой параметр по очереди 1
2) печать данных в виде таблички с шапкой не ездит 1
3) добавление строки ПОСТРОЧНО 1
4) поиск по ЛЮБОМУ столбцу (появляется подменю со всеми породами) 0 !!!!
5) удаление строки ПОЛНОСТЬЮ 1
6) сохранение данных в файл 1
7) чтение таблицы из файла 1
8) сортировка либо по одному полю - 45, по любому полю - выше. По возрастанию\убыванию\алфавит 0 !!!!
9) выход 1
10) защита от дурака на вводе ПО ЧИСЛОВЫМ ПОЛЯМ 0

*/

/*
Н Марка Руль (Л/П) Цвет Объем двигателя Год выпуска

*/


#include <stdio.h>
#include <ctype.h>

void menu();
int enterdatabaze(struct stroka stroki[20],int*);
void printdatabaze(struct stroka stroki[20],int);
int addline(struct stroka stroki[20], int*,int);
int delline(struct stroka stroki[20], int*);
void safe(struct stroka stroki[20],int);
int load(struct stroka stroki[20],int*);
void writebaze(struct stroka stroki[20],int);
void search(struct stroka stroki[20],int);
void sort(struct stroka stroki[20],int);

struct stroka
{
	int number;
	char marka[15];
	char rul[10];
	char cvet[15];
	float obem;
	int god;
};

void main()
{
	int vibor;
	int endofenter = 0;
	int kolstr = 0;
	struct stroka stroki[20];

	while (true)
	{
		printf("\nHi dear user! Look what we have for you!\n");
		menu();
		scanf_s("%d", &vibor);
		switch (vibor)
		{
		case 1:
			if (endofenter == 1)
				printdatabaze(stroki, kolstr);
			else printf("\nBaze are not exist!\n");
			break;
		case 2:
			endofenter = enterdatabaze(stroki, &kolstr);
			break;
		case 3:
			endofenter = addline(stroki, &kolstr, kolstr);
			break;
		case 4:
			if (endofenter == 1)
				endofenter = delline(stroki, &kolstr);
			else printf("\nBaze are not exist!\n");
			break;
		case 5:
			if (endofenter == 1)
				safe(stroki, kolstr);
			else printf("\nBaze are not exist!\n");
			break;
		case 6:
			endofenter = load(stroki, &kolstr);
			break;
		case 7:
			if (endofenter == 1)
				writebaze(stroki, kolstr);
			else printf("\nBaze are not exist!\n");
			break;
		case 8:
			if (endofenter == 1)
				search(stroki,kolstr);
			else printf("\nBaze are not exist!\n");
			break;
		case 9:
			if (endofenter == 1)
				sort(stroki, kolstr);
			else printf("\nBaze are not exist!\n");
			break;

		case 0:
			goto exit;
		default:
			printf("check your number!\n");
		}
	}
exit: printf("\nGoodbye!\n");
}

void safe(struct stroka stroki[20], int kolstr)
{

	int i,charshetchik;
	char name[20];
	char yesno[10];
	printf("\nVi perezapisat' safe? (y/n)\n");
	scanf_s("%s", yesno, 10);
	if (yesno[0] == 'y')
	{
		FILE* faylik;

		fopen_s(&faylik, "baze.dat", "wb");
		fwrite(&kolstr, sizeof(int), 1, faylik);
		for (i = 0; i < kolstr; i++)
		{
			fwrite(&stroki[i].number, sizeof(int), 1, faylik);
			for (charshetchik = 0; charshetchik < 15; charshetchik++)
				fwrite(&stroki[i].marka[charshetchik], sizeof(char), 1, faylik);
			for (charshetchik = 0; charshetchik < 10; charshetchik++)
				fwrite(&stroki[i].rul[charshetchik], sizeof(char), 1, faylik);
			for (charshetchik = 0; charshetchik < 15; charshetchik++)
				fwrite(&stroki[i].cvet[charshetchik], sizeof(char), 1, faylik);
			fwrite(&stroki[i].obem, sizeof(float), 1, faylik);
			fwrite(&stroki[i].god, sizeof(int), 1, faylik);
		}
		//for (i = 0; i < kolstr; i++)
		//	fprintf(faylik, "%d$%s$%s$%s$%.1f$%d\n", stroki[i].number, stroki[i].marka, stroki[i].rul, stroki[i].cvet, stroki[i].obem, stroki[i].god);
		printf("\nsafe is access\n");
		fclose(faylik);
	}
	else;
}


int load(struct stroka stroki[20], int*kolstr)
{
	char name[20],now,next,marka[20],rul[10],cvet[20];
	int i,j,number,god,desk;
	float obem;
	FILE* faylik;
	fopen_s(&faylik, "baze.dat", "rb");
	fread(kolstr, sizeof(int), 1, faylik);
	for (j = 0; j < *kolstr; j++)
	{
		fread(&number, sizeof(int), 1, faylik);
		for (i = 0; i < 15; i++)
			fread(&marka[i], sizeof(char), 1, faylik);
		for (i = 0; i < 10; i++)
			fread(&rul[i], sizeof(char), 1, faylik);
		for (i = 0; i < 15; i++)
			fread(&cvet[i], sizeof(char), 1, faylik);
		fread(&obem, sizeof(float), 1, faylik);
		fread(&god, sizeof(int), 1, faylik);
		stroki[j].number = number;
		for (i = 0; i < 15; i++)
			stroki[j].marka[i] = marka[i];
		for (i = 0; i < 10; i++)
			stroki[j].rul[i] = rul[i];
		for (i = 0; i < 15; i++)
			stroki[j].cvet[i] = cvet[i]; 
		stroki[j].obem = obem;
		stroki[j].god = god;
	}
	fclose(faylik);
	printf("\nload is access!\n");
	if (*kolstr == 0) return 0;
	else return 1;
}



int enterdatabaze(struct stroka stroki[20],int*n)
{	
	int i;
	int rulrightenter = 0; int endofenter = 0;
	char yesno[10];
	printf("\nVi hotite zapolnit' bazu zanovo? (y/n)\n");
	scanf_s("%s", yesno,10);
	if (yesno[0] == 'y')
	{

		printf("Enter the how much columns you want to enter\n");

		scanf_s("%d", n);



		for (i = 0; i < *n; i++)
		{
			stroki[i].number = i + 1;
			printf("Marka - ?\n");
			scanf_s("%s", stroki[i].marka, 20);
			printf("Rul - ? (l - left; r - right)\n");
			scanf_s("%s", stroki[i].rul, 10);
			if (stroki[i].rul[0] == 'l' && stroki[i].rul[1] == '\0' || stroki[i].rul[0] == 'r' && stroki[i].rul[1] == '\0')
			{
				printf("Cvet - ?\n");
				scanf_s("%s", &stroki[i].cvet, 20);
				printf("Ob'em dvigatelya - ?\n");
				scanf_s("%f", &stroki[i].obem);
				printf("God - ?\n");
				scanf_s("%d", &stroki[i].god);
				endofenter = 1;

			}
			else
			{
				rulrightenter = 1;
				printf("\nwrite 'l' or 'r'!\n");
			}
		}
		if (endofenter == 1 && rulrightenter == 0)
			return 1;
		else return 0;
	}
	else;
}






int addline(struct stroka stroki[20], int*kolstrad,int kolstr)
{
	int i = 0;
	int rulrightenter = 0; int endofenter = 0;
	printf("Write full line (Marka + rul(l/r) + cvet + ob`em dvigatelya + god)\n");

	if (kolstr == 0)
	{
		stroki[i].number = i + 1;
		scanf_s("%s%s%s%f%d", stroki[i].marka, 20, stroki[i].rul, 10, &stroki[i].cvet, 20, &stroki[i].obem, &stroki[i].god);
		if (stroki[i].rul[0] == 'l' && stroki[i].rul[1] == '\0' || stroki[i].rul[0] == 'r' && stroki[i].rul[1] == '\0')
		{
			endofenter = 1;
		}
		else
		{
			rulrightenter = 1;
			printf("\nwrite 'l' or 'r'!\n");
		}
		if (endofenter == 1 && rulrightenter == 0)
		{
			*kolstrad = 1;
			return 1;
		}
		else return 0;
	}
	else
	{
		i = kolstr;
		stroki[i].number = stroki[i-1].number + 1;
		scanf_s("%s%s%s%f%d", stroki[i].marka, 10, stroki[i].rul, 10, stroki[i].cvet, 10, &stroki[i].obem, &stroki[i].god);
		if (stroki[i].rul[0] == 'l' && stroki[i].rul[1] == '\0' || stroki[i].rul[0] == 'r' && stroki[i].rul[1] == '\0')
		{
			endofenter = 1;
		}
		if (endofenter == 1)
			*kolstrad += 1;
		return 1;
	}
}




int delline(struct stroka stroki[20], int* kolst)
{
	int vvod, numstr, i, j, length, k, charmas;
	float vvodik;
	int equal = 1;
	char vvodniy[15];
	start:
	printf("\nPo kakomy stolbcy osushestvlyat' udalenie stroki? - number(1) + marka(2) + rul(3) + cvet(4) + ob`em dvigatelya(5) + god(6)\n");
	scanf_s("%d", &vvod);
	switch (vvod)
	{
	case 1:
		printf("\nvvedite number stroki na udalenie\n");
		scanf_s("%d", &numstr);
		for (i = 0; i < *kolst; i++)
		{
			if (stroki[i].number == numstr)
			{
				for (; i < *kolst - 1; i++)
				{
					stroki[i].number = stroki[i + 1].number;
					for (charmas = 0; charmas < 15; charmas++)
						stroki[i].marka[charmas] = stroki[i + 1].marka[charmas];
					for (charmas = 0; charmas < 15; charmas++)
						stroki[i].rul[charmas] = stroki[i + 1].rul[charmas];
					for (charmas = 0; charmas < 15; charmas++)
						stroki[i].cvet[charmas] = stroki[i + 1].cvet[charmas];
					stroki[i].obem = stroki[i + 1].obem;
					stroki[i].god = stroki[i + 1].god;
				}
				*kolst -= 1;
				break;
			}
		}
		break;

	case 2:
		printf("\nkakuy marku udalit?\n");
		scanf_s("%s", vvodniy, 15);
		length = 0;
		for (k = 0; k < 15; k++)
		{
			if (vvodniy[k] >= 97 && vvodniy[k] <= 122 || vvodniy[k] >= 65 && vvodniy[k] <= 90)
				length += 1;
			else break;
		}


		for (i = 0; i <= *kolst; i++)
		{
			for (j = 0; j < length; j++)
				if (stroki[i].marka[j] != vvodniy[j]) equal = 0;
			if (equal)
			{
				for (int h = i; h <= *kolst - 1; h++)
				{
					stroki[h].number = stroki[h + 1].number;
					for (charmas = 0; charmas < 15; charmas++)
						stroki[h].marka[charmas] = stroki[h + 1].marka[charmas];
					for (charmas = 0; charmas < 15; charmas++)
						stroki[h].rul[charmas] = stroki[h + 1].rul[charmas];
					for (charmas = 0; charmas < 15; charmas++)
						stroki[h].cvet[charmas] = stroki[h + 1].cvet[charmas];
					stroki[h].obem = stroki[h + 1].obem;
					stroki[h].god = stroki[h + 1].god;
				}
				*kolst -= 1;
				i--;
			}
			equal = 1;
		}
		break;


	case 3:
		printf("\nkakoy rul udalit?\n");
		scanf_s("%s", vvodniy, 15);
		length = 0;
		for (k = 0; k < 15; k++)
		{
			if (vvodniy[k] >= 97 && vvodniy[k] <= 122 || vvodniy[k] >= 65 && vvodniy[k] <= 90)
				length += 1;
			else break;
		}


		for (i = 0; i <= *kolst; i++)
		{
			for (j = 0; j < length; j++)
				if (stroki[i].rul[j] != vvodniy[j]) equal = 0;
			if (equal)
			{
				for (int h = i; h <= *kolst - 1; h++)
				{
					stroki[h].number = stroki[h + 1].number;
					for (charmas = 0; charmas < 15; charmas++)
						stroki[h].marka[charmas] = stroki[h + 1].marka[charmas];
					for (charmas = 0; charmas < 15; charmas++)
						stroki[h].rul[charmas] = stroki[h + 1].rul[charmas];
					for (charmas = 0; charmas < 15; charmas++)
						stroki[h].cvet[charmas] = stroki[h + 1].cvet[charmas];
					stroki[h].obem = stroki[h + 1].obem;
					stroki[h].god = stroki[h + 1].god;
				}
				*kolst -= 1;
				i--;
			}
			equal = 1;
		}
		break;


	case 4:
		printf("\nkakoy cvet udalit?\n");
		scanf_s("%s", vvodniy, 15);
		length = 0;
		for (k = 0; k < 15; k++)
		{
			if (vvodniy[k] >= 97 && vvodniy[k] <= 122 || vvodniy[k] >= 65 && vvodniy[k] <= 90)
				length += 1;
			else break;
		}


		for (i = 0; i <= *kolst; i++)
		{
			for (j = 0; j < length; j++)
				if (stroki[i].cvet[j] != vvodniy[j]) equal = 0;
			if (equal)
			{
				for (int h = i; h <= *kolst - 1; h++)
				{
					stroki[h].number = stroki[h + 1].number;
					for (charmas = 0; charmas < 15; charmas++)
						stroki[h].marka[charmas] = stroki[h + 1].marka[charmas];
					for (charmas = 0; charmas < 15; charmas++)
						stroki[h].rul[charmas] = stroki[h + 1].rul[charmas];
					for (charmas = 0; charmas < 15; charmas++)
						stroki[h].cvet[charmas] = stroki[h + 1].cvet[charmas];
					stroki[h].obem = stroki[h + 1].obem;
					stroki[h].god = stroki[h + 1].god;
				}
				*kolst -= 1;
				i--;
			}
			equal = 1;
		}
		break;


	case 5:
		printf("\nkakoy ob'em udalit?\n");
		scanf_s("%f", &vvodik);
		for (i = 0; i <= *kolst; i++)
		{
			if (stroki[i].obem == vvodik)
			{
				for (int h = i; h <= *kolst - 1; h++)
				{
					stroki[h].number = stroki[h + 1].number;
					for (charmas = 0; charmas < 15; charmas++)
						stroki[h].marka[charmas] = stroki[h + 1].marka[charmas];
					for (charmas = 0; charmas < 15; charmas++)
						stroki[h].rul[charmas] = stroki[h + 1].rul[charmas];
					for (charmas = 0; charmas < 15; charmas++)
						stroki[h].cvet[charmas] = stroki[h + 1].cvet[charmas];
					stroki[h].obem = stroki[h + 1].obem;
					stroki[h].god = stroki[h + 1].god;
				}
				*kolst -= 1;
				i--;
			}
		}
		break;
	case 6:
		printf("\nkakoy god udalit?\n");
		scanf_s("%d", &numstr);
		for (i = 0; i <= *kolst; i++)
		{
			if (stroki[i].god == numstr)
			{
				for (int h = i; h <= *kolst - 1; h++)
				{
					stroki[h].number = stroki[h + 1].number;
					for (charmas = 0; charmas < 15; charmas++)
						stroki[h].marka[charmas] = stroki[h + 1].marka[charmas];
					for (charmas = 0; charmas < 15; charmas++)
						stroki[h].rul[charmas] = stroki[h + 1].rul[charmas];
					for (charmas = 0; charmas < 15; charmas++)
						stroki[h].cvet[charmas] = stroki[h + 1].cvet[charmas];
					stroki[h].obem = stroki[h + 1].obem;
					stroki[h].god = stroki[h + 1].god;
				}
				*kolst -= 1;
				i--;
			}
		}
		break;
	default:
		printf("\nCheck your number!\n");
		goto start;
}
	printf("\naccess\n");
	if (*kolst > 0) return 1;
	else return 0;
}




void printdatabaze(struct stroka stroki[20],int n)
{
	int p;
	printf("\n");
	printf("%c", 218);
	for (p = 1; p <= 57; p++)
	{
		printf("%c", 196);
		if (p == 6 || p == 19 || p == 22 || p == 32 || p == 48)
			printf("%c", 194);
	}
	printf("%c\n", 191);
	printf("%cnumber%c    marka    %crul%c   cvet   %cob`em dvigatelya%c   god   %c\n", 179, 179, 179, 179, 179, 179,179);
	printf("%c", 195);

	for (p = 1; p <= 57; p++)
	{
		printf("%c", 196);
		if (p == 6 || p == 19 || p == 22 || p == 32 || p == 48)
			printf("%c", 197);
	}

	printf("%c\n", 180);

	for (int i = 0; i < n; i++)
	{
		printf("%c%6d%c%13s%c %s %c%10s%c%16.1f%c%9d%c\n",179, stroki[i].number, 179, stroki[i].marka, 179, stroki[i].rul, 179, stroki[i].cvet, 179, stroki[i].obem, 179, stroki[i].god, 179);
	}

	printf("%c", 192);

	for (p = 1; p <= 57; p++)
	{
		printf("%c", 196);
		if (p == 6 || p == 19 || p == 22 || p == 32 || p == 48)
			printf("%c", 193);
	}

	printf("%c\n", 217);
}

void writebaze(struct stroka stroki[20],int n)
{
	char name[20];
	FILE* fa;
	printf("\nwrite name of File\n");
	scanf_s("%s", name, 20);

	fopen_s(&fa, name, "w");

	int p;
	fprintf(fa,"\n");
	fprintf(fa,"%c", 218);
	for (p = 1; p <= 57; p++)
	{
		fprintf(fa,"%c", 196);
		if (p == 6 || p == 19 || p == 22 || p == 32 || p == 48)
			fprintf(fa,"%c", 194);
	}
	fprintf(fa,"%c\n", 191);
	fprintf(fa,"%cnumber%c    marka    %crul%c   cvet   %cob`em dvigatelya%c   god   %c\n", 179, 179, 179, 179, 179, 179, 179);
	fprintf(fa,"%c", 195);

	for (p = 1; p <= 57; p++)
	{
		fprintf(fa,"%c", 196);
		if (p == 6 || p == 19 || p == 22 || p == 32 || p == 48)
			fprintf(fa,"%c", 197);
	}

	fprintf(fa,"%c\n", 180);

	for (int i = 0; i < n; i++)
	{
		fprintf(fa,"%c%6d%c%13s%c %s %c%10s%c%16.1f%c%9d%c\n", 179, stroki[i].number, 179, stroki[i].marka, 179, stroki[i].rul, 179, stroki[i].cvet, 179, stroki[i].obem, 179, stroki[i].god, 179);
	}

	fprintf(fa,"%c", 192);

	for (p = 1; p <= 57; p++)
	{
		fprintf(fa,"%c", 196);
		if (p == 6 || p == 19 || p == 22 || p == 32 || p == 48)
			fprintf(fa,"%c", 193);
	}

	fprintf(fa,"%c\n", 217);
}


void search(struct stroka stroki[20],int kolstr)
{
	int vibor,i,vvod,length1 = 0,length2 = 0,length,k,j;
	int checkmark = 1;
	int check = 0;
	int equal = 1;
	char vvodniy[15];
	float vvodf;
	fulstart:
	printf("\nPo kakomu stolbcy iskat'?\nNumber - 1\nMarka - 2\nRul - 3\nCvet - 4\nOb'em dvigatya - 5\nGod - 6\n");
	scanf_s("%d", &vibor);
	switch (vibor)
	{
	case 1:
	start1:
		printf("\nStroka s kakim nomerom vas interesuet?\n");
		for (i = 1; i <= kolstr; i++)
			printf("%d\n", i);
		scanf_s("%d", &vvod);
		if (vvod > kolstr)
		{
			printf("\n Net strochek s takim nomerom!");
			goto start1;
		}
		for (i = 0; i < kolstr; i++)
			if (stroki[i].number == vvod)
				printf("\n%c%d%c%s%c%s%c%s%c%.1f%c%d%c\n", 179, stroki[i].number, 179, stroki[i].marka, 179, stroki[i].rul, 179, stroki[i].cvet, 179, stroki[i].obem, 179, stroki[i].god, 179);
		break;

	case 2:
	start2:
		printf("\nkakuy marku iskat'?\n");
		check = 1;
		for (i = 0; i < kolstr; i++)
		{
			j = i - 1;
			while (j >= 0)
			{
				for (k = 0; k < 10; k++)
				{
					if (stroki[i].marka[k] >= 97 && stroki[i].marka[k] <= 122 || stroki[i].marka[k] >= 65 && stroki[i].marka[k] <= 90)
						length1 += 1;
					if (stroki[j].marka[k] >= 97 && stroki[j].marka[k] <= 122 || stroki[j].marka[k] >= 65 && stroki[j].marka[k] <= 90)
						length2 += 1;
				}
				if (length1 == length2)
					for (k = 0; k < length1; k++)
						if (stroki[i].marka[k] != stroki[j].marka[k])
						{
							check = 1;
							break;
						}
						else;
				else check = 1;
				length2 = 0;
				length1 = 0;
				if (check)
				{
					if (j!=0) check = 0;
					j--;
				}
				else break;
			}
			if (check) printf("%s\n", stroki[i].marka);
			check = 0;
		}

		scanf_s("%s", vvodniy, 15);
		length = 0;
		for (k = 0; k < 15; k++)
		{
			if (isalpha(vvodniy[k]))
				length += 1;
			else break;
		}

		for (i = 0; i < kolstr; i++)
		{
			for (j = 0; j < length; j++)
				if (stroki[i].marka[j] != vvodniy[j]) equal = 0;
			if (equal)
			{
				printf("%c%d%c%s%c%s%c%s%c%.1f%c%d%c\n", 179, stroki[i].number, 179, stroki[i].marka, 179, stroki[i].rul, 179, stroki[i].cvet, 179, stroki[i].obem, 179, stroki[i].god, 179);
				checkmark = 0;
			}
			equal = 1;
		}

		if (checkmark)
		{
			printf("\nTakih strocheck ne naideno!\n");
			goto start2;
		}
		break;
	case 3:
	start3:
		printf("\nkakoy rul iskat'?\n");
		check = 1;
		for (i = 0; i < kolstr; i++)
		{
			j = i - 1;
			while (j >= 0)
			{
				for (k = 0; k < 10; k++)
				{
					if (stroki[i].rul[k] >= 97 && stroki[i].rul[k] <= 122 || stroki[i].rul[k] >= 65 && stroki[i].rul[k] <= 90)
						length1 += 1;
					if (stroki[j].rul[k] >= 97 && stroki[j].rul[k] <= 122 || stroki[j].rul[k] >= 65 && stroki[j].rul[k] <= 90)
						length2 += 1;
				}
				if (length1 == length2)
					for (k = 0; k < length1; k++)
						if (stroki[i].rul[k] != stroki[j].rul[k])
						{
							check = 1;
							break;
						}
						else;
				else check = 1;
				length2 = 0;
				length1 = 0;
				if (check)
				{
					if (j != 0) check = 0;
					j--;
				}
				else break;
			}
			if (check) printf("%s\n", stroki[i].rul);
			check = 0;
		}

		scanf_s("%s", vvodniy, 15);
		length = 0;
		for (k = 0; k < 15; k++)
		{
			if (isalpha(vvodniy[k]))
				length += 1;
			else break;
		}

		for (i = 0; i < kolstr; i++)
		{
			for (j = 0; j < length; j++)
				if (stroki[i].rul[j] != vvodniy[j]) equal = 0;
			if (equal)
			{
				printf("%c%d%c%s%c%s%c%s%c%.1f%c%d%c\n", 179, stroki[i].number, 179, stroki[i].marka, 179, stroki[i].rul, 179, stroki[i].cvet, 179, stroki[i].obem, 179, stroki[i].god, 179);
				checkmark = 0;
			}
			equal = 1;
		}

		if (checkmark)
		{
			printf("\nTakih strocheck ne naideno!\n");
			goto start3;
		}
		break;
	case 4:
	start4:
		printf("\nkakoy cvet iskat'?\n");
		check = 1;
		for (i = 0; i < kolstr; i++)
		{
			j = i - 1;
			while (j >= 0)
			{
				for (k = 0; k < 10; k++)
				{
					if (stroki[i].cvet[k] >= 97 && stroki[i].cvet[k] <= 122 || stroki[i].cvet[k] >= 65 && stroki[i].cvet[k] <= 90)
						length1 += 1;
					if (stroki[j].cvet[k] >= 97 && stroki[j].cvet[k] <= 122 || stroki[j].cvet[k] >= 65 && stroki[j].cvet[k] <= 90)
						length2 += 1;
				}
				if (length1 == length2)
					for (k = 0; k < length1; k++)
						if (stroki[i].cvet[k] != stroki[j].cvet[k])
						{
							check = 1;
							break;
						}
						else;
				else check = 1;
				length2 = 0;
				length1 = 0;
				if (check)
				{
					if (j != 0) check = 0;
					j--;
				}
				else break;
			}
			if (check) printf("%s\n", stroki[i].cvet);
			check = 0;
		}

		scanf_s("%s", vvodniy, 15);
		length = 0;
		for (k = 0; k < 15; k++)
		{
			if (isalpha(vvodniy[k]))
				length += 1;
			else break;
		}

		for (i = 0; i < kolstr; i++)
		{
			for (j = 0; j < length; j++)
				if (stroki[i].cvet[j] != vvodniy[j]) equal = 0;
			if (equal)
			{
				printf("%c%d%c%s%c%s%c%s%c%.1f%c%d%c\n", 179, stroki[i].number, 179, stroki[i].marka, 179, stroki[i].rul, 179, stroki[i].cvet, 179, stroki[i].obem, 179, stroki[i].god, 179);
				checkmark = 0;
			}
			equal = 1;
		}

		if (checkmark)
		{
			printf("\nTakih strocheck ne naideno!\n");
			goto start4;
		}
		break;

	case 5:
	start5:
		printf("\nkakoy ob'em iskat'?\n");
		check = 1;
		for (i = 0; i < kolstr; i++)
		{
			j = i - 1;
			while (j >= 0)
			{
				if (stroki[i].obem == stroki[j].obem)
				{
					check = 0;
					break;
				}

				if (check)
				{
					if (j != 0) check = 1;
					j--;
				}
			}
			if (check) printf("%.1f\n", stroki[i].obem);
			check = 1;
		}

		scanf_s("%f", &vvodf);

		for (i = 0; i < kolstr; i++)
			if (stroki[i].obem == vvodf)
			{
				printf("\n%c%d%c%s%c%s%c%s%c%.1f%c%d%c\n", 179, stroki[i].number, 179, stroki[i].marka, 179, stroki[i].rul, 179, stroki[i].cvet, 179, stroki[i].obem, 179, stroki[i].god, 179);
				checkmark = 0;
			}
		

		if (checkmark)
		{
			printf("\nTakih strocheck ne naideno!\n");
			goto start5;
		}
		break;

	case 6:
	start6:
		printf("\nkakoy god iskat'?\n");
		check = 1;
		for (i = 0; i < kolstr; i++)
		{
			j = i - 1;
			while (j >= 0)
			{
				if (stroki[i].god == stroki[j].god)
				{
					check = 0;
					break;
				}

				if (check)
				{
					if (j != 0) check = 1;
					j--;
				}
			}
			if (check) printf("%d\n", stroki[i].god);
			check = 1;
		}

		scanf_s("%d", &vvod);

		for (i = 0; i < kolstr; i++)
			if (stroki[i].god == vvod)
			{
				printf("\n%c%d%c%s%c%s%c%s%c%.1f%c%d%c\n", 179, stroki[i].number, 179, stroki[i].marka, 179, stroki[i].rul, 179, stroki[i].cvet, 179, stroki[i].obem, 179, stroki[i].god, 179);
				checkmark = 0;
			}


		if (checkmark)
		{
			printf("\nTakih strocheck ne naideno!\n");
			goto start6;
		}
		break;

	default:
		printf("\nCheck your number!\n");
		goto fulstart;
	}
}



void sort(struct stroka stroki[20],int kolstr)
{
	int vibor,vibor2,i,j,k,length,kolst;
	struct stroka sortik[20];
	fulstart:
	printf("\nPo kakomu stolbcy osushestvl'yat' sortirovky?\nNumber - 1\nMarka - 2\nRul - 3\nCvet - 4\nOb'em dvigatya - 5\nGod - 6\n");
	scanf_s("%d", &vibor);
	switch (vibor)
	{
	case 1:
		start1:
		printf("\nPo vozrastaniu - 1 ili po ybivaniu - 2?\n");
		scanf_s("%d", &vibor2);
		switch (vibor2)
		{
		case 1:
			printdatabaze(stroki, kolstr);
			break;
		case 2:
			i = kolstr - 1;
			j = 0;
			while (j < kolstr)
			{
				sortik[j] = stroki[i];
				i--, j++;
			}
			for (i = 0; i < kolstr; i++)
				stroki[i] = sortik[i];
			printf("\nAccess\n");
			break;
		default:
			printf("\nCheck your number!!\n");
			goto start1;
		}
		break;
	case 2:
		start2:
	    kolst = kolstr;
		printf("\nPo alphavitu - 1, obratno - 2\n");
		scanf_s("%d", &vibor2);
		switch (vibor2)
		{
		case 1:
			length = 0;
			i = 0;
			j = 0;
			while (i < kolst - 1)
			{
				for (k = 0; k < 15; k++)
				{
					if (stroki[i].marka[k] >= 97 && stroki[i].marka[k] <= 122 || stroki[i].marka[k] >= 65 && stroki[i].marka[k] <= 90)
						length += 1;
					else break;
				}
				while (j < length)
				{
					if (stroki[i].marka[j] >= 97 && stroki[i].marka[j] <= 122 && stroki[i + 1].marka[j] >= 97 && stroki[i + 1].marka[j] <= 122)
						if (stroki[i].marka[j] > stroki[i + 1].marka[j])
						{
							sortik[i] = stroki[i];
							stroki[i] = stroki[i + 1];
							stroki[i + 1] = sortik[i];
							break;
						}
						else
							if (stroki[i].marka[j] < stroki[i + 1].marka[j])
								break;
							else
								j++;
					else
						if (stroki[i].marka[j] >= 97 && stroki[i].marka[j] <= 122 && stroki[i + 1].marka[j] >= 65 && stroki[i + 1].marka[j] <= 90)
							if (stroki[i].marka[j] > stroki[i + 1].marka[j] + 32)
							{
								sortik[i] = stroki[i];
								stroki[i] = stroki[i + 1];
								stroki[i + 1] = sortik[i];
								break;
							}
							else
								if (stroki[i].marka[j] < stroki[i + 1].marka[j])
									break;
								else
									j++;
						else
							if (stroki[i].marka[j] >= 65 && stroki[i].marka[j] <= 90 && stroki[i + 1].marka[j] >= 97 && stroki[i + 1].marka[j] <= 122)
								if (stroki[i].marka[j] + 32 > stroki[i + 1].marka[j])
								{
									sortik[i] = stroki[i];
									stroki[i] = stroki[i + 1];
									stroki[i + 1] = sortik[i];
									break;
								}
								else
									if (stroki[i].marka[j] < stroki[i + 1].marka[j])
										break;
									else
										j++;
							else
								if (stroki[i].marka[j] >= 65 && stroki[i].marka[j] <= 90 && stroki[i + 1].marka[j] >= 65 && stroki[i + 1].marka[j] <= 90)
									if (stroki[i].marka[j] > stroki[i + 1].marka[j])
									{
										sortik[i] = stroki[i];
										stroki[i] = stroki[i + 1];
										stroki[i + 1] = sortik[i];
										break;
									}
									else
										if (stroki[i].marka[j] < stroki[i + 1].marka[j])
											break;
										else
											j++;
				}
				i++;
				length = 0;
				j = 0;
				if (i == kolst - 1)
				{
					kolst--;
					i = 0;
				}
			}
			break;
		case 2:
			length = 0;
			i = 0;
			j = 0;
			while (i < kolst - 1)
			{
				for (k = 0; k < 15; k++)
				{
					if (stroki[i].marka[k] >= 97 && stroki[i].marka[k] <= 122 || stroki[i].marka[k] >= 65 && stroki[i].marka[k] <= 90)
						length += 1;
					else break;
				}
				while (j < length)
				{
					if (stroki[i].marka[j] >= 97 && stroki[i].marka[j] <= 122 && stroki[i + 1].marka[j] >= 97 && stroki[i + 1].marka[j] <= 122)
						if (stroki[i].marka[j] < stroki[i + 1].marka[j])
						{
							sortik[i] = stroki[i];
							stroki[i] = stroki[i + 1];
							stroki[i + 1] = sortik[i];
							break;
						}
						else
							if (stroki[i].marka[j] > stroki[i + 1].marka[j])
								break;
							else
								j++;
					else
						if (stroki[i].marka[j] >= 97 && stroki[i].marka[j] <= 122 && stroki[i + 1].marka[j] >= 65 && stroki[i + 1].marka[j] <= 90)
							if (stroki[i].marka[j] < stroki[i + 1].marka[j] + 32)
							{
								sortik[i] = stroki[i];
								stroki[i] = stroki[i + 1];
								stroki[i + 1] = sortik[i];
								break;
							}
							else
								if (stroki[i].marka[j] > stroki[i + 1].marka[j])
									break;
								else
									j++;
						else
							if (stroki[i].marka[j] >= 65 && stroki[i].marka[j] <= 90 && stroki[i + 1].marka[j] >= 97 && stroki[i + 1].marka[j] <= 122)
								if (stroki[i].marka[j] + 32 < stroki[i + 1].marka[j])
								{
									sortik[i] = stroki[i];
									stroki[i] = stroki[i + 1];
									stroki[i + 1] = sortik[i];
									break;
								}
								else
									if (stroki[i].marka[j] > stroki[i + 1].marka[j])
										break;
									else
										j++;
							else
								if (stroki[i].marka[j] >= 65 && stroki[i].marka[j] <= 90 && stroki[i + 1].marka[j] >= 65 && stroki[i + 1].marka[j] <= 90)
									if (stroki[i].marka[j] < stroki[i + 1].marka[j])
									{
										sortik[i] = stroki[i];
										stroki[i] = stroki[i + 1];
										stroki[i + 1] = sortik[i];
										break;
									}
									else
										if (stroki[i].marka[j] > stroki[i + 1].marka[j])
											break;
										else
											j++;
				}
				i++;
				length = 0;
				j = 0;
				if (i == kolst - 1)
				{
					kolst--;
					i = 0;
				}
			}
			break;
		}
	break;

	case 3:
		start3:
		printf("\nPo r - 1, l - 2\n");
		scanf_s("%d", &vibor2);
		switch (vibor2)
		{
		case 1:
			j = 0;
			for (i = 0; i < kolstr; i++)
			{
				if (stroki[i].rul[0] == 'r')
				{
					sortik[j] = stroki[i];
					j++;
				}
			}
			for (i = 0; i < kolstr; i++)
			{
				if (stroki[i].rul[0] == 'l')
				{
					sortik[j] = stroki[i];
					j++;
				}
			}
			for (i = 0; i < kolstr; i++)
				stroki[i] = sortik[i];
			break;
		case 2:
			j = 0;
			for (i = 0; i < kolstr; i++)
			{
				if (stroki[i].rul[0] == 'l')
				{
					sortik[j] = stroki[i];
					j++;
				}
			}
			for (i = 0; i < kolstr; i++)
			{
				if (stroki[i].rul[0] == 'r')
				{
					sortik[j] = stroki[i];
					j++;
				}
			}
			for (i = 0; i < kolstr; i++)
				stroki[i] = sortik[i];
			break;
		default:
			printf("\nCheck your number!!\n");
			goto start3;
		}
		break;


	case 4:

	start4:
		kolst = kolstr;
		printf("\nPo alphavitu - 1, obratno - 2\n");
		scanf_s("%d", &vibor2);
		switch (vibor2)
		{
		case 1:
			length = 0;
			i = 0;
			j = 0;
			while (i < kolst - 1)
			{
				for (k = 0; k < 15; k++)
				{
					if (stroki[i].cvet[k] >= 97 && stroki[i].cvet[k] <= 122 || stroki[i].cvet[k] >= 65 && stroki[i].cvet[k] <= 90)
						length += 1;
					else break;
				}
				while (j < length)
				{
					if (stroki[i].cvet[j] >= 97 && stroki[i].cvet[j] <= 122 && stroki[i + 1].cvet[j] >= 97 && stroki[i + 1].cvet[j] <= 122)
						if (stroki[i].cvet[j] > stroki[i + 1].cvet[j])
						{
							sortik[i] = stroki[i];
							stroki[i] = stroki[i + 1];
							stroki[i + 1] = sortik[i];
							break;
						}
						else
							if (stroki[i].cvet[j] < stroki[i + 1].cvet[j])
								break;
							else
								j++;
					else
						if (stroki[i].cvet[j] >= 97 && stroki[i].cvet[j] <= 122 && stroki[i + 1].cvet[j] >= 65 && stroki[i + 1].cvet[j] <= 90)
							if (stroki[i].cvet[j] > stroki[i + 1].cvet[j] + 32)
							{
								sortik[i] = stroki[i];
								stroki[i] = stroki[i + 1];
								stroki[i + 1] = sortik[i];
								break;
							}
							else
								if (stroki[i].cvet[j] < stroki[i + 1].cvet[j])
									break;
								else
									j++;
						else
							if (stroki[i].cvet[j] >= 65 && stroki[i].cvet[j] <= 90 && stroki[i + 1].cvet[j] >= 97 && stroki[i + 1].cvet[j] <= 122)
								if (stroki[i].cvet[j] + 32 > stroki[i + 1].cvet[j])
								{
									sortik[i] = stroki[i];
									stroki[i] = stroki[i + 1];
									stroki[i + 1] = sortik[i];
									break;
								}
								else
									if (stroki[i].cvet[j] < stroki[i + 1].cvet[j])
										break;
									else
										j++;
							else
								if (stroki[i].cvet[j] >= 65 && stroki[i].cvet[j] <= 90 && stroki[i + 1].cvet[j] >= 65 && stroki[i + 1].cvet[j] <= 90)
									if (stroki[i].cvet[j] > stroki[i + 1].cvet[j])
									{
										sortik[i] = stroki[i];
										stroki[i] = stroki[i + 1];
										stroki[i + 1] = sortik[i];
										break;
									}
									else
										if (stroki[i].cvet[j] < stroki[i + 1].cvet[j])
											break;
										else
											j++;
				}
				i++;
				length = 0;
				j = 0;
				if (i == kolst - 1)
				{
					kolst--;
					i = 0;
				}
			}
			break;
		case 2:
			length = 0;
			i = 0;
			j = 0;
			while (i < kolst - 1)
			{
				for (k = 0; k < 15; k++)
				{
					if (stroki[i].cvet[k] >= 97 && stroki[i].cvet[k] <= 122 || stroki[i].cvet[k] >= 65 && stroki[i].cvet[k] <= 90)
						length += 1;
					else break;
				}
				while (j < length)
				{
					if (stroki[i].cvet[j] >= 97 && stroki[i].cvet[j] <= 122 && stroki[i + 1].cvet[j] >= 97 && stroki[i + 1].cvet[j] <= 122)
						if (stroki[i].cvet[j] < stroki[i + 1].cvet[j])
						{
							sortik[i] = stroki[i];
							stroki[i] = stroki[i + 1];
							stroki[i + 1] = sortik[i];
							break;
						}
						else
							if (stroki[i].cvet[j] > stroki[i + 1].cvet[j])
								break;
							else
								j++;
					else
						if (stroki[i].cvet[j] >= 97 && stroki[i].cvet[j] <= 122 && stroki[i + 1].cvet[j] >= 65 && stroki[i + 1].cvet[j] <= 90)
							if (stroki[i].cvet[j] < stroki[i + 1].cvet[j] + 32)
							{
								sortik[i] = stroki[i];
								stroki[i] = stroki[i + 1];
								stroki[i + 1] = sortik[i];
								break;
							}
							else
								if (stroki[i].cvet[j] > stroki[i + 1].cvet[j])
									break;
								else
									j++;
						else
							if (stroki[i].cvet[j] >= 65 && stroki[i].cvet[j] <= 90 && stroki[i + 1].cvet[j] >= 97 && stroki[i + 1].cvet[j] <= 122)
								if (stroki[i].cvet[j] + 32 < stroki[i + 1].cvet[j])
								{
									sortik[i] = stroki[i];
									stroki[i] = stroki[i + 1];
									stroki[i + 1] = sortik[i];
									break;
								}
								else
									if (stroki[i].cvet[j] > stroki[i + 1].cvet[j])
										break;
									else
										j++;
							else
								if (stroki[i].cvet[j] >= 65 && stroki[i].cvet[j] <= 90 && stroki[i + 1].cvet[j] >= 65 && stroki[i + 1].cvet[j] <= 90)
									if (stroki[i].cvet[j] < stroki[i + 1].cvet[j])
									{
										sortik[i] = stroki[i];
										stroki[i] = stroki[i + 1];
										stroki[i + 1] = sortik[i];
										break;
									}
									else
										if (stroki[i].cvet[j] > stroki[i + 1].cvet[j])
											break;
										else
											j++;
				}
				i++;
				length = 0;
				j = 0;
				if (i == kolst - 1)
				{
					kolst--;
					i = 0;
				}
			}
			break;
		default:
			printf("\nCheck your number!!\n");
			goto start4;
		}

		break;
	
	case 5:
	start5:
		printf("\nPo ubivaniu - 1, vozrastaniu - 2\n");
		scanf_s("%d", &vibor2);
		switch (vibor2)
		{
		case 1:
			kolst = kolstr;
			i = 0;
			while (i < kolst - 1)
			{
				if (stroki[i].obem < stroki[i + 1].obem)
				{
					sortik[i] = stroki[i];
					stroki[i] = stroki[i + 1];
					stroki[i + 1] = sortik[i];
				}
				i++;
				if (i == kolst - 1)
				{
					kolst--;
					i = 0;
				}
			}
			break;

		case 2:
			kolst = kolstr;
			i = 0;
			while (i < kolst - 1)
			{
				if (stroki[i].obem > stroki[i + 1].obem)
				{
					sortik[i] = stroki[i];
					stroki[i] = stroki[i + 1];
					stroki[i + 1] = sortik[i];
				}
				i++;
				if (i == kolst - 1)
				{
					kolst--;
					i = 0;
				}
			}
			break;

		default:
			printf("\nCheck your number!!\n");
			goto start5;
		}
		break;
	case 6:
	start6:
		printf("\nPo ubivaniu - 1, vozrastaniu - 2\n");
		scanf_s("%d", &vibor2);
		switch (vibor2)
		{
		case 1:
			kolst = kolstr;
			i = 0;
			while (i < kolst - 1)
			{
				if (stroki[i].god < stroki[i + 1].god)
				{
					sortik[i] = stroki[i];
					stroki[i] = stroki[i + 1];
					stroki[i + 1] = sortik[i];
				}
				i++;
				if (i == kolst - 1)
				{
					kolst--;
					i = 0;
				}
			}
			break;

		case 2:
			kolst = kolstr;
			i = 0;
			while (i < kolst - 1)
			{
				if (stroki[i].god > stroki[i + 1].god)
				{
					sortik[i] = stroki[i];
					stroki[i] = stroki[i + 1];
					stroki[i + 1] = sortik[i];
				}
				i++;
				if (i == kolst - 1)
				{
					kolst--;
					i = 0;
				}
			}
			break;

		default:
			printf("\nCheck your number!!\n");
			goto start6;
		}
		break;
	
	default:
		printf("\nCheck your number!!\n");
		goto fulstart;
	}
	printf("\nAccess\n");
}





void menu()
{
	int i;
	putchar(201);
	for (i = 0; i < 35; i++)
	{
		putchar(205);
	}
	putchar(187);
	printf("\n");
	putchar(186);
	printf("Menu:");
	for (i = 0; i < 30; i++)
	{
		printf(" ");
	}
	putchar(186);
	printf("\n");
	putchar(186);
	printf("Print database - write 1");
	for (i = 0; i < 11; i++)
	{
		printf(" ");
	}
	putchar(186);
	printf("\n");
	putchar(186);
	printf("Enter database - write 2");
	for (i = 0; i < 11; i++)
	{
		printf(" ");
	}
	putchar(186);
	printf("\n");
	putchar(186);
	printf("Add 1 line to database - write 3");
	for (i = 0; i < 3; i++)
	{
		printf(" ");
	}
	putchar(186);
	printf("\n");
	putchar(186);
	printf("Delete 1 line - write 4");
	for (i = 0; i < 12; i++)
	{
		printf(" ");
	}
	putchar(186);
	printf("\n");
	putchar(186);
	printf("Save baze on file - write 5");
	for (i = 0; i < 8; i++)
	{
		printf(" ");
	}
	putchar(186);
	printf("\n");

	putchar(186);
	printf("Load baze from file - write 6");
	for (i = 0; i < 6; i++)
	{
		printf(" ");
	}
	putchar(186);
	printf("\n");

	putchar(186);
	printf("Print baze to file - write 7(alpha)");
	for (i = 0; i < 0; i++)
	{
		printf(" ");
	}
	putchar(186);
	printf("\n");


	putchar(186);
	printf("Search on baze - write 8");
	for (i = 0; i < 11; i++)
	{
		printf(" ");
	}
	putchar(186);
	printf("\n");

	putchar(186);
	printf("Sort - write 9");
	for (i = 0; i < 21; i++)
	{
		printf(" ");
	}
	putchar(186);
	printf("\n");

	putchar(186);
	printf("Exit - write 0");
	for (i = 0; i < 21; i++)
	{
		printf(" ");
	}
	putchar(186);
	printf("\n");
	putchar(200);
	for (i = 0; i < 35; i++)
	{
		putchar(205);
	}
	putchar(188);
	printf("\n");
}
