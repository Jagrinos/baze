//ПИШЕМ БАЗУ ДАННЫХ! + СУБД! + :( СИМВОЛЬНЫЕ ЦЕЛОЧИСЛЕННЫЕ И ВЕЩЕСТВЕННЫЕ ПОД СИМВОЛОМ МОЖНО МАССИВ ЕСЛИ НЕ ИДЕТ 
/* при запуске должно появиться ЭТО ВСЕ меню свич для выбора пунктов без глобалки
3: 
1) ввод данных в пустую интерфейс на усмотрение но удобно. писать какой параметр по очереди
2) печать данных в виде таблички с шапкой не ездит ААААААААААААААА
3) добавление строки ПОСТРОЧНО 
4) поиск по конкретному столбцу тоесть вывести допустим всех строки с овчарками из строки породы
5) выход

4:
1) ввод данных в пустую интерфейс на усмотрение но удобно. писать какой параметр по очереди
2) печать данных в виде таблички с шапкой не ездит ААААААААААААААА
3) добавление строки ПОСТРОЧНО
4) поиск по ЛЮБОМУ столбцу (появляется подменю со всеми породами)
5) удаление строки ПОЛНОСТЬЮ 
6) сохранение данных в файл
7) чтение таблицы из файла
8) выход из проги

5:
1) ввод данных в пустую интерфейс на усмотрение но удобно. писать какой параметр по очереди 1
2) печать данных в виде таблички с шапкой не ездит ААААААААААААААА 0
3) добавление строки ПОСТРОЧНО 1
4) поиск по ЛЮБОМУ столбцу (появляется подменю со всеми породами) 0 !!!!
5) удаление строки ПОЛНОСТЬЮ 1
6) сохранение данных в файл 1
7) чтение таблицы из файла 1
8) сортировка либо по одному полю - 45, по любому полю - выше. По возрастанию\убыванию\алфавит 0 !!!!
9) выход 1
10) защита от дурака на вводе ПО ЧИСЛОВЫМ ПОЛЯМ 0

*/

/*
Н Марка Руль (Л/П) Цвет Объем двигателя Год выпуска

*/


//setlocale(LC_ALL, "RUS");

#include <stdio.h>
#include <io.h>

void verh();
void menu();
int enterdatabaze(struct stroka stroki[20],int*);
void printdatabaze(struct stroka stroki[20],int);
int addline(struct stroka stroki[20], int*,int);
int delline(struct stroka stroki[20], int*);
void safe(struct stroka stroki[20],int);
int load(struct stroka stroki[20],int*);


struct stroka
{
	int number;
	char marka[15];
	char rul[10];
	char cvet[15];
	float obem;
	int god;
};

void main()
{
	int vibor;
	int endofenter = 0;
	int kolstr = 0;
	struct stroka stroki[20];

	while (true)
	{
		printf("\nhi dear user! Look what we have for you!\n");
		menu();
		scanf_s("%d", &vibor);
		switch (vibor)
		{
		case 1: 
			if (endofenter == 1)
				printdatabaze(stroki, kolstr);
			else printf("\nBaze are not exist!\n");
			break;
		case 2: 
			endofenter = enterdatabaze(stroki,&kolstr); 
			break;
		case 3: 
			endofenter = addline(stroki, &kolstr, kolstr);
			break;
		case 4:
			if (endofenter == 1)
				endofenter = delline(stroki, &kolstr);
			else printf("\nBaze are not exist!\n");
			break;
		case 5:
		//	if (endofenter == 1)
				safe(stroki, kolstr);
		//	else printf("\nBaze are not exist!\n");
			break;
		case 6:
			endofenter = load(stroki, &kolstr);
			break;
		case 0: 
			goto exit;
		default:
			printf("check your number!\n");
			goto exit;
		}
	}
exit: printf("\nGoodbye!\n");
}

void safe(struct stroka stroki[20], int kolstr)
{
	int i,desk,charshetchik;
	char name[20];
	FILE* faylik;

	fopen_s(&faylik,"baze.dat", "wb");
	fwrite(&kolstr, sizeof(int), 1, faylik);
	for (i = 0; i < kolstr; i++)
	{
		fwrite(&stroki[i].number, sizeof(int), 1, faylik);
		for (charshetchik = 0; charshetchik<15; charshetchik++)
			fwrite(&stroki[i].marka[charshetchik], sizeof(char), 1, faylik);
		for (charshetchik = 0; charshetchik < 10; charshetchik++)
			fwrite(&stroki[i].rul[charshetchik], sizeof(char), 1, faylik);
		for (charshetchik = 0; charshetchik < 15; charshetchik++)
			fwrite(&stroki[i].cvet[charshetchik], sizeof(char), 1, faylik);
		fwrite(&stroki[i].obem, sizeof(float), 1, faylik);
		fwrite(&stroki[i].god, sizeof(int), 1, faylik);
	}
	//for (i = 0; i < kolstr; i++)
	//	fprintf(faylik, "%d$%s$%s$%s$%.1f$%d\n", stroki[i].number, stroki[i].marka, stroki[i].rul, stroki[i].cvet, stroki[i].obem, stroki[i].god);
	printf("\nsafe is access\n");
	fclose(faylik);
}


int load(struct stroka stroki[20], int*kolstr)
{
	char name[20],now,next,marka[20],rul[10],cvet[20];
	int i,j,number,god,desk;
	float obem;
	FILE* faylik;
	fopen_s(&faylik, "baze.dat", "rb");
	fread(kolstr, sizeof(int), 1, faylik);
	for (j = 0; j < *kolstr; j++)
	{
		fread(&number, sizeof(int), 1, faylik);
		for (i = 0; i < 15; i++)
			fread(&marka[i], sizeof(char), 1, faylik);
		for (i = 0; i < 10; i++)
			fread(&rul[i], sizeof(char), 1, faylik);
		for (i = 0; i < 15; i++)
			fread(&cvet[i], sizeof(char), 1, faylik);
		fread(&obem, sizeof(float), 1, faylik);
		fread(&god, sizeof(int), 1, faylik);
		stroki[j].number = number;
		for (i = 0; i < 15; i++)
			stroki[j].marka[i] = marka[i];
		for (i = 0; i < 10; i++)
			stroki[j].rul[i] = rul[i];
		for (i = 0; i < 15; i++)
			stroki[j].cvet[i] = cvet[i]; 
		stroki[j].obem = obem;
		stroki[j].god = god;
	}
	fclose(faylik);
	printf("\nload is access!\n");
	if (*kolstr == 0) return 0;
	else return 1;
}



int enterdatabaze(struct stroka stroki[20],int*n)
{
	int i;
	int rulrightenter = 0; int endofenter = 0;
	
	
	printf("Enter the how much columns you want to enter\n");

	scanf_s("%d", n);

	

	for (i = 0; i < *n; i++)
	{
		stroki[i].number = i+1;
		printf("Marka - ?\n");
		scanf_s("%s", stroki[i].marka,20);
		printf("Rul - ? (l - left; r - right)\n");
		scanf_s("%s", stroki[i].rul,10);
		if (stroki[i].rul[0] == 'l' && stroki[i].rul[1] == '\0' || stroki[i].rul[0] == 'r' && stroki[i].rul[1] == '\0')
		{
			printf("Cvet - ?\n");
			scanf_s("%s", &stroki[i].cvet, 20);
			printf("Ob'em dvigatelya - ?\n");
			scanf_s("%f", &stroki[i].obem);
			printf("God - ?\n");
			scanf_s("%d", &stroki[i].god);
			endofenter = 1;

		}
		else
		{
			rulrightenter = 1;
			printf("\nwrite 'l' or 'r'!\n");
		}
	}
	if (endofenter == 1 && rulrightenter == 0)
		return 1;
	else return 0;
}






int addline(struct stroka stroki[20], int*kolstrad,int kolstr)
{
	int i = 0;
	int rulrightenter = 0; int endofenter = 0;
	printf("Write full line (Marka + rul(l/r) + cvet + ob`em dvigatelya + god)\n");

	if (kolstr == 0)
	{
		stroki[i].number = i + 1;
		scanf_s("%s%s%s%f%d", stroki[i].marka, 20, stroki[i].rul, 10, &stroki[i].cvet, 20, &stroki[i].obem, &stroki[i].god);
		if (stroki[i].rul[0] == 'l' && stroki[i].rul[1] == '\0' || stroki[i].rul[0] == 'r' && stroki[i].rul[1] == '\0')
		{
			endofenter = 1;
		}
		else
		{
			rulrightenter = 1;
			printf("\nwrite 'l' or 'r'!\n");
		}
		if (endofenter == 1 && rulrightenter == 0)
		{
			*kolstrad = 1;
			return 1;
		}
		else return 0;
	}
	else
	{
		i = kolstr;
		stroki[i].number = stroki[i-1].number + 1;
		scanf_s("%s%s%s%f%d", stroki[i].marka, 10, stroki[i].rul, 10, stroki[i].cvet, 10, &stroki[i].obem, &stroki[i].god);
		if (stroki[i].rul[0] == 'l' && stroki[i].rul[1] == '\0' || stroki[i].rul[0] == 'r' && stroki[i].rul[1] == '\0')
		{
			endofenter = 1;
		}
		if (endofenter == 1)
			*kolstrad += 1;
		return 1;
	}
}




int delline(struct stroka stroki[20], int* kolst)
{
	int vvod, numstr, i, j, length, k, charmas;
	float vvodik;
	int equal = 1;
	char vvodniy[15];
	printf("\nPo kakomy stolbcy osushestvlyat' udalenie stroki? - number(1) + marka(2) + rul(3) + cvet(4) + ob`em dvigatelya(5) + god(6)\n");
	scanf_s("%d", &vvod);
	switch (vvod)
	{
	case 1:
		printf("\nvvedite number stroki na udalenie\n");
		scanf_s("%d", &numstr);
		for (i = 0; i < *kolst; i++)
		{
			if (stroki[i].number == numstr)
			{
				for (; i < *kolst - 1; i++)
				{
					stroki[i].number = stroki[i + 1].number;
					for (charmas = 0; charmas < 15; charmas++)
						stroki[i].marka[charmas] = stroki[i + 1].marka[charmas];
					for (charmas = 0; charmas < 15; charmas++)
						stroki[i].rul[charmas] = stroki[i + 1].rul[charmas];
					for (charmas = 0; charmas < 15; charmas++)
						stroki[i].cvet[charmas] = stroki[i + 1].cvet[charmas];
					stroki[i].obem = stroki[i + 1].obem;
					stroki[i].god = stroki[i + 1].god;
				}
				*kolst -= 1;
				break;
			}
		}
		break;

	case 2:
		printf("\nkakuy marku udalit?\n");
		scanf_s("%s", vvodniy, 15);
		length = 0;
		for (k = 0; k < 15; k++)
		{
			if (vvodniy[k] > 97 && vvodniy[k] < 122 || vvodniy[k] > 65 && vvodniy[k] < 90)
				length += 1;
			else break;
		}


		for (i = 0; i <= *kolst; i++)
		{
			for (j = 0; j < length; j++)
				if (stroki[i].marka[j] != vvodniy[j]) equal = 0;
			if (equal)
			{
				for (int h = i; h <= *kolst - 1; h++)
				{
					stroki[h].number = stroki[h + 1].number;
					for (charmas = 0; charmas < 15; charmas++)
						stroki[h].marka[charmas] = stroki[h + 1].marka[charmas];
					for (charmas = 0; charmas < 15; charmas++)
						stroki[h].rul[charmas] = stroki[h + 1].rul[charmas];
					for (charmas = 0; charmas < 15; charmas++)
						stroki[h].cvet[charmas] = stroki[h + 1].cvet[charmas];
					stroki[h].obem = stroki[h + 1].obem;
					stroki[h].god = stroki[h + 1].god;
				}
				*kolst -= 1;
				i--;
			}
			equal = 1;
		}
		break;


	case 3:
		printf("\nkakoy rul udalit?\n");
		scanf_s("%s", vvodniy, 15);
		length = 0;
		for (k = 0; k < 15; k++)
		{
			if (vvodniy[k] > 97 && vvodniy[k] < 122 || vvodniy[k] > 65 && vvodniy[k] < 90)
				length += 1;
			else break;
		}


		for (i = 0; i <= *kolst; i++)
		{
			for (j = 0; j < length; j++)
				if (stroki[i].rul[j] != vvodniy[j]) equal = 0;
			if (equal)
			{
				for (int h = i; h <= *kolst - 1; h++)
				{
					stroki[h].number = stroki[h + 1].number;
					for (charmas = 0; charmas < 15; charmas++)
						stroki[h].marka[charmas] = stroki[h + 1].marka[charmas];
					for (charmas = 0; charmas < 15; charmas++)
						stroki[h].rul[charmas] = stroki[h + 1].rul[charmas];
					for (charmas = 0; charmas < 15; charmas++)
						stroki[h].cvet[charmas] = stroki[h + 1].cvet[charmas];
					stroki[h].obem = stroki[h + 1].obem;
					stroki[h].god = stroki[h + 1].god;
				}
				*kolst -= 1;
				i--;
			}
			equal = 1;
		}
		break;


	case 4:
		printf("\nkakoy cvet udalit?\n");
		scanf_s("%s", vvodniy, 15);
		length = 0;
		for (k = 0; k < 15; k++)
		{
			if (vvodniy[k] > 97 && vvodniy[k] < 122 || vvodniy[k] > 65 && vvodniy[k] < 90)
				length += 1;
			else break;
		}


		for (i = 0; i <= *kolst; i++)
		{
			for (j = 0; j < length; j++)
				if (stroki[i].cvet[j] != vvodniy[j]) equal = 0;
			if (equal)
			{
				for (int h = i; h <= *kolst - 1; h++)
				{
					stroki[h].number = stroki[h + 1].number;
					for (charmas = 0; charmas < 15; charmas++)
						stroki[h].marka[charmas] = stroki[h + 1].marka[charmas];
					for (charmas = 0; charmas < 15; charmas++)
						stroki[h].rul[charmas] = stroki[h + 1].rul[charmas];
					for (charmas = 0; charmas < 15; charmas++)
						stroki[h].cvet[charmas] = stroki[h + 1].cvet[charmas];
					stroki[h].obem = stroki[h + 1].obem;
					stroki[h].god = stroki[h + 1].god;
				}
				*kolst -= 1;
				i--;
			}
			equal = 1;
		}
		break;


	case 5:
		printf("\nkakoy ob'em udalit?\n");
		scanf_s("%f", &vvodik);
		for (i = 0; i <= *kolst; i++)
		{
			if (stroki[i].obem == vvodik)
			{
				for (int h = i; h <= *kolst - 1; h++)
				{
					stroki[h].number = stroki[h + 1].number;
					for (charmas = 0; charmas < 15; charmas++)
						stroki[h].marka[charmas] = stroki[h + 1].marka[charmas];
					for (charmas = 0; charmas < 15; charmas++)
						stroki[h].rul[charmas] = stroki[h + 1].rul[charmas];
					for (charmas = 0; charmas < 15; charmas++)
						stroki[h].cvet[charmas] = stroki[h + 1].cvet[charmas];
					stroki[h].obem = stroki[h + 1].obem;
					stroki[h].god = stroki[h + 1].god;
				}
				*kolst -= 1;
				i--;
			}
		}
		break;
	case 6:
		printf("\nkakoy god udalit?\n");
		scanf_s("%d", &numstr);
		for (i = 0; i <= *kolst; i++)
		{
			if (stroki[i].god == numstr)
			{
				for (int h = i; h <= *kolst - 1; h++)
				{
					stroki[h].number = stroki[h + 1].number;
					for (charmas = 0; charmas < 15; charmas++)
						stroki[h].marka[charmas] = stroki[h + 1].marka[charmas];
					for (charmas = 0; charmas < 15; charmas++)
						stroki[h].rul[charmas] = stroki[h + 1].rul[charmas];
					for (charmas = 0; charmas < 15; charmas++)
						stroki[h].cvet[charmas] = stroki[h + 1].cvet[charmas];
					stroki[h].obem = stroki[h + 1].obem;
					stroki[h].god = stroki[h + 1].god;
				}
				*kolst -= 1;
				i--;
			}
		}
		break;
}
	printf("\naccess\n");
	if (*kolst > 0) return 1;
	else return 0;
}




void printdatabaze(struct stroka stroki[20],int n)
{
	int i;
	verh();
	for (i = 0; i < n; i++)
	{
		printf("%d %s %s %s %.1f %d\n", stroki[i].number, stroki[i].marka, stroki[i].rul, stroki[i].cvet, stroki[i].obem, stroki[i].god);
	}

}

void verh()
{
	int i;
	putchar(218);
	for (i = 0; i < 25; i++)
	{
		putchar(196);
	}
	putchar(191);
	printf("\n");
}

void menu()
{
	int i;
	putchar(201);
	for (i = 0; i < 35; i++)
	{
		putchar(205);
	}
	putchar(187);
	printf("\n");
	putchar(186);
	printf("Menu:");
	for (i = 0; i < 30; i++)
	{
		printf(" ");
	}
	putchar(186);
	printf("\n");
	putchar(186);
	printf("Print database - write 1");
	for (i = 0; i < 11; i++)
	{
		printf(" ");
	}
	putchar(186);
	printf("\n");
	putchar(186);
	printf("Enter database - write 2");
	for (i = 0; i < 11; i++)
	{
		printf(" ");
	}
	putchar(186);
	printf("\n");
	putchar(186);
	printf("Add 1 line to database - write 3");
	for (i = 0; i < 3; i++)
	{
		printf(" ");
	}
	putchar(186);
	printf("\n");
	putchar(186);
	printf("Delete 1 line - write 4");
	for (i = 0; i < 12; i++)
	{
		printf(" ");
	}
	putchar(186);
	printf("\n");
	putchar(186);
	printf("Save baze on file - write 5");
	for (i = 0; i < 8; i++)
	{
		printf(" ");
	}
	putchar(186);
	printf("\n");
	putchar(186);
	printf("Load baze from file - write 6");
	for (i = 0; i < 6; i++)
	{
		printf(" ");
	}
	putchar(186);
	printf("\n");
	putchar(186);
	printf("Exit - write 0");
	for (i = 0; i < 21; i++)
	{
		printf(" ");
	}
	putchar(186);
	printf("\n");
	putchar(200);
	for (i = 0; i < 35; i++)
	{
		putchar(205);
	}
	putchar(188);
	printf("\n");
}
